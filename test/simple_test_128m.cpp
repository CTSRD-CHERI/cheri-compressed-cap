#define TEST_CC_FORMAT_LOWER 128m
#define TEST_CC_FORMAT_UPPER 128M
#define TEST_CC_IS_MORELLO

#include "simple_test_common.cpp"

TEST_CASE("Fast representability check sign extended", "[fuzz]") {
    // Check that the fast representability check properly accounts for Morello sign extension on the address.
    checkRepCheckFails(/*pesbt=*/0xa1a04fffffdff00, /*addr=*/0x01a4fe02410001ff,
                       /*expected_base=*/0xfeff000000000000, /*expected_top=*/0xff3ff80000000000,
                       /*new_addr=*/0);
}

TEST_CASE("Fast representability check zero length", "[fuzz]") {
    // Check that the fast representability check does not treat zero length caps as always representable.
    // This is not true if the cursor change results in a sign change on the resulting bounds.
    checkRepCheckFails(/*pesbt=*/0xaff000000000000, /*addr=*/0x0080000000800000,
                       /*expected_base=*/0xff80000000800007, /*expected_top=*/0xff80000000800007,
                       /*new_addr=*/0);
}

TEST_CASE("Fast representability zero length no sign change", "[fuzz]") {
    // Check that the fast representability check does not treat zero length caps as always representable.
    // Even when the sign of the cursor does not change the bounds interpretation could.
    checkRepCheckFails(/*pesbt=*/0xffff000000000000, /*addr=*/0x0029ffffff85ffff,
                       /*expected_base=*/0x0029ffffff860007, /*expected_top=*/0x0029ffffff860007,
                       /*new_addr=*/0);
}

TEST_CASE("Fuzzer-detected fast representability mismatch 1", "[fuzz]") {
    checkFastRepCheckSucceeds(/*pesbt=*/0x81000100ffeeffd2, /*addr=*/0x0045000000000000,
                              /*expected_base=*/0xff40000000000000, /*expected_top=*/0x0ffa0000000000000,
                              /*new_addr=*/0);
}

TEST_CASE("Fast representability mismatch 2", "[fuzz]") {
    checkFastRepCheckSucceeds(/*pesbt=*/0x9a9a656665659a9a, /*addr=*/0x00100a9a9a9a9a9a,
                              /*expected_base=*/0xfe6a600000000000, /*expected_top=*/0xff95800000000000,
                              /*new_addr=*/0);
}

TEST_CASE("Morello set_addr should tag clear on invalid exponent", "[fuzz]") {
    auto cap = checkFastRepCheckSucceeds(/*pesbt=*/0x0000000040060003, /*addr=*/0x00000000003fffca,
                                         /*expected_base=*/0x0000000000000000, /*expected_top=*/_CC_MAX_TOP,
                                         /*new_addr=*/0x00000000003fffca);
    // The exponent is beyond the valid range, but is_representable_with_addr should still return
    // true to match the Morello hardware. This can actually happen due to the settag instruction
    // and was seen in one of the autogenerated Morello tests...
    CHECK(!cap.cr_bounds_valid);
    CHECK(cap.cr_exp > _CC_MAX_EXPONENT);
    CHECK(cap.cr_exp == 51);
    // Even though the Morello spec CapIsRepresentable function does not take the invalid exponent into account,
    // the CapAdd function will clear the tag for these capabilities. In this library we return false for
    // is_representable_with_addr() calls to ensure the tag bit does not accidentally remain set.
    CHECK(!_cc_N(is_representable_with_addr)(&cap, 0x00000000003fffca));
    // Setting the address on an invalid exponent capability must clear the tag.
    cap.cr_tag = true;
    _cc_N(set_addr)(&cap, 0x00000000003fffca);
    CHECK(!cap.cr_tag);
}
